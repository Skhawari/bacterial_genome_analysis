import pandas as pd
from snakemake.utils import min_version
min_version("7.0")

wrapper_prefix = "https://github.com/snakemake/snakemake-wrappers/raw/master/bio"

configfile: "config/config.yaml"
samples = pd.read_csv(config["samples"], sep="\t", index_col="sample")
long_read_samples = pd.read_csv(config["long_read_samples"], sep="\t", index_col="sample")

# Read long-read blacklist if it exists
long_read_blacklist = []
if "long_read_blacklist" in config and config["long_read_blacklist"]:
    try:
        with open(config["long_read_blacklist"], 'r') as f:
            long_read_blacklist = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        pass  # Silently continue without blacklist

# Read complete sample blacklist if it exists
complete_blacklist = []
if "complete_blacklist" in config and config["complete_blacklist"]:
    try:
        with open(config["complete_blacklist"], 'r') as f:
            complete_blacklist = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        pass  # Silently continue without blacklist

# Define sample sets based on the complex logic described
ALL_SAMPLES = samples.index.tolist()  # All samples (for QC only)
ASSEMBLY_SAMPLES = [s for s in ALL_SAMPLES if s not in complete_blacklist]  # Samples for assembly and downstream
LONG_READ_AVAILABLE = long_read_samples.index.tolist()  # Samples with long reads available
LONG_READ_BLACKLISTED = long_read_blacklist  # Samples blacklisted from long-read analysis only

# Helper function to determine assembly mode for a sample
def get_assembly_mode_for_sample(sample):
    """
    Determine assembly mode for a given sample based on:
    1. Global config setting (hybrid vs short)
    2. Sample long-read blacklist status
    3. Long read data availability
    """
    if config["assembly"]["mode"] == "short":
        return "short"  # Force short-read only for all samples
    
    # Config is "hybrid" - check sample-specific conditions
    if sample in LONG_READ_BLACKLISTED:
        return "short"  # Long-read blacklisted samples use short reads only
    
    if sample not in LONG_READ_AVAILABLE:
        return "short"  # No long reads available - use short reads only
    
    return "hybrid"  # Sample has long reads and is not blacklisted - use hybrid

# Nach prokka
if config["pipeline"]["run_downstream"] == True:
    include: "rules/downstream.smk"

if config["pipeline"]["run_downstream"]:
            final_targets += expand("downstream/mlst/{sample}.txt",      sample=DS_SAMPLES)
            final_targets += expand("downstream/amr/{sample}.tsv",       sample=DS_SAMPLES)
            final_targets += expand("downstream/virulence/{sample}.tsv", sample=DS_SAMPLES)
            final_targets += expand("downstream/plasmid/{sample}/mob_recon_report.tsv", sample=DS_SAMPLES)
            final_targets += ["downstream/summary.xlsx"]


include: "rules/qc.smk"
include: "rules/assembly.smk"
include: "rules/quast.smk"
include: "rules/prokka.smk"
include: "rules/visualization.smk"
include: "rules/comparative.smk"
include: "rules/phylogeny.smk"
include: "rules/reporting.smk"

rule all:
    input:
        # Assembly outputs
        expand("results/assembly/{sample}/contigs.fasta", sample=ASSEMBLY_SAMPLES),
        # Quality control outputs
        expand("results/assembly_qc/{sample}/report.txt", sample=ASSEMBLY_SAMPLES),
        expand("results/busco/{sample}/short_summary.specific.bacteria_odb10.{sample}.txt", sample=ASSEMBLY_SAMPLES),
        # Annotation outputs
        expand("results/annotation/{sample}/{sample}.gff", sample=ASSEMBLY_SAMPLES),
        expand("results/annotation/{sample}/{sample}.gtf", sample=ASSEMBLY_SAMPLES),
        # downstream analysis outputs
        final_targets,
        # Visualization outputs
        "results/visualization/prokka_annotation_report.html",
        "results/visualization/prokka_annotation_report.pdf",
        # Enhanced statistical visualization outputs
        "results/enhanced_visualization/comprehensive_analysis_report.pdf",
        # Comparative genomics outputs
        "results/comparative/core_gene_alignment.aln",
        "results/comparative/gene_presence_absence.csv",
        "results/comparative/comparative_genomics_report.html",
        "results/comparative/pangenome_analysis.png",
        "results/comparative/core_alignment.phy",
        # Phylogenetic analysis outputs
        "results/phylogeny/core_genome.treefile",
        "results/phylogeny/core_genome.contree",
        "results/phylogeny/phylogenetic_tree.png",
        "results/phylogeny/consensus_tree.png",
        "results/phylogeny/phylogeny_report.html",
        "results/phylogeny/tree_statistics.txt",
        # Summary reports
        "results/assembly/assembly_summary.txt",
        "results/assembly_multiqc/assembly_multiqc_report.html",
        # QC report for ALL samples (including blacklisted ones)
        "results/multiqc/multiqc_report.html",
        "reports/final_report.html"



