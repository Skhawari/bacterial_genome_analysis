import pandas as pd
from snakemake.utils import min_version
min_version("7.0")

wrapper_prefix = "https://github.com/snakemake/snakemake-wrappers/raw/master/bio"

configfile: "config/config.yaml"
samples = pd.read_csv(config["samples"], sep="\t", index_col="sample")
long_read_samples = pd.read_csv(config["long_read_samples"], sep="\t", index_col="sample")

# Read long-read blacklist if it exists, excludes the long-read samples from all steps after qc, uses then only short read mode
long_read_blacklist = []
if config.get("long_read_blacklist"):
    try:
        with open(config["long_read_blacklist"], 'r') as f:
            long_read_blacklist = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        pass

# Read complete sample blacklist if it exists, excludes the sample from all steps after qc
complete_blacklist = []
if config.get("complete_blacklist"):
    try:
        with open(config["complete_blacklist"], 'r') as f:
            complete_blacklist = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        pass

# Define sample sets
ALL_SAMPLES = samples.index.tolist()
ASSEMBLY_SAMPLES = [s for s in ALL_SAMPLES if s not in complete_blacklist]
LONG_READ_AVAILABLE = long_read_samples.index.tolist()
LONG_READ_BLACKLISTED = long_read_blacklist
DS_SAMPLES = ASSEMBLY_SAMPLES  # for downstream
ANNOT_SAMPLES = ASSEMBLY_SAMPLES  # for annotation-dependent modules

# Add outgroup to annotation and downstream samples if provided

if config["annotation"].get("outgroup_fasta", ""):
    outgroup_name = config["annotation"].get("outgroup_name", "outgroup")
    ANNOT_SAMPLES = ASSEMBLY_SAMPLES + [outgroup_name]
    DS_SAMPLES = ANNOT_SAMPLES

# Helper function to determine assembly mode
def get_assembly_mode_for_sample(sample):
    # Skip assembly mode determination for outgroup since it's already assembled
    outgroup_name = config["annotation"].get("outgroup_name", "outgroup")
    if sample == outgroup_name:
        return "skip"  # Special value indicating no assembly needed
    
    if config["assembly"]["mode"] == "short":
        return "short"
    if sample in LONG_READ_BLACKLISTED:
        return "short"
    if sample not in LONG_READ_AVAILABLE:
        return "short"
    return "hybrid"

# Final output targets
final_targets = [
    expand("results/assembly/{sample}/contigs.fasta", sample=ASSEMBLY_SAMPLES),
    expand("results/assembly_qc/{sample}/report.txt", sample=ASSEMBLY_SAMPLES),
    expand("results/busco/{sample}/short_summary.specific.bacteria_odb10.{sample}.txt", sample=ASSEMBLY_SAMPLES),
    expand("results/annotation/{sample}/{sample}.gff", sample=ANNOT_SAMPLES),
    expand("results/annotation/{sample}/{sample}.gtf", sample=ANNOT_SAMPLES),
    "results/visualization/prokka_annotation_report.html",
    "results/visualization/prokka_annotation_report.pdf",
    "results/enhanced_visualization/comprehensive_analysis_report.pdf",
    "results/comparative/core_gene_alignment.aln",
    "results/comparative/gene_presence_absence.csv",
    "results/comparative/comparative_genomics_report.html",
    "results/comparative/pangenome_analysis.png",
    "results/comparative/core_alignment.phy",
    "results/phylogeny/core_genome.treefile",
    "results/phylogeny/core_genome.contree",
    "results/phylogeny/phylogenetic_tree.png",
    "results/phylogeny/consensus_tree.png",
    "results/phylogeny/phylogeny_report.html",
    "results/phylogeny/tree_statistics.txt",
    "results/assembly/assembly_summary.txt",
    "results/assembly_multiqc/assembly_multiqc_report.html",
    "results/multiqc/multiqc_report.html",
    "reports/final_report.html"
]

if config["pipeline"].get("run_mlst", False):
    final_targets += expand("results/downstream/mlst/{sample}.txt", sample=DS_SAMPLES)
if config["pipeline"].get("run_amr", False):
    final_targets += expand("results/downstream/amr/{sample}.tsv", sample=DS_SAMPLES)
if config["pipeline"].get("run_virulence", False):
    final_targets += expand("results/downstream/virulence/{sample}.tsv", sample=DS_SAMPLES)
if config["pipeline"].get("run_plasmid", False):
    final_targets += expand("results/downstream/plasmid/{sample}/blast_plasmid_hits.tsv", sample=DS_SAMPLES)

# Add downstream summary if any downstream analysis is enabled
if any([
    config["pipeline"].get("run_mlst", False),
    config["pipeline"].get("run_amr", False),
    config["pipeline"].get("run_virulence", False),
    config["pipeline"].get("run_plasmid", False),
]):
    final_targets += ["results/downstream/summary.xlsx"]

# Include rules
include: "rules/qc.smk"
include: "rules/assembly.smk"
include: "rules/quast.smk"
include: "rules/prokka.smk"
include: "rules/visualization.smk"
include: "rules/comparative.smk"
include: "rules/phylogeny.smk"
include: "rules/reporting.smk"

if any([
    config["pipeline"].get("run_mlst", False),
    config["pipeline"].get("run_amr", False),
    config["pipeline"].get("run_virulence", False),
    config["pipeline"].get("run_plasmid", False),
]):
    include: "rules/downstream.smk"

rule all:
    input:
        final_targets